Index: src/urna/UrnaHandler.java
===================================================================
--- src/urna/UrnaHandler.java	(revision 87)
+++ src/urna/UrnaHandler.java	(working copy)
@@ -28,7 +28,7 @@
 	private Socket votante;
 	//private ObjectInputStream votanteIn; TODO Ver porque no se usa
 	private ObjectOutputStream votanteOut;
-
+
 	// Variables de conexión hacia la urna
 	private Socket mesa;
 	private ObjectInputStream mesaIn;
@@ -33,7 +33,7 @@
 	private Socket mesa;
 	private ObjectInputStream mesaIn;
 	private ObjectOutputStream mesaOut;
-
+
 	// Propiedades de esta transacción
 	private String svu;
 	private String idv;
@@ -39,7 +39,7 @@
 	private String idv;
 	private String sobre;
 	private String challenge;
-
+
 	// Clave privada de la urna
 	private String privadaUrna;
 	public UrnaHandler(Socket aMesa)	throws IOException {
@@ -44,16 +44,16 @@
 	private String privadaUrna;
 	public UrnaHandler(Socket aMesa)	throws IOException {
 		mesa = aMesa;
+		mesaOut = new ObjectOutputStream(mesa.getOutputStream());
 		mesaIn = new ObjectInputStream(mesa.getInputStream());
-		mesaOut = new ObjectOutputStream(mesa.getOutputStream());
-
+
 		privadaUrna = InfoServidores.readKey(InfoServidores.privadaUrnaPath);
 	}
-
+
 	/**
 	 * El run sirve para correr el thread.
 	 */
-	public void run()
+	public void run()
 	{
 		//
 		// TODO: Responder los errores etc.
@@ -69,29 +69,29 @@
 		catch (Exception e) {
 			e.printStackTrace();
 		}
-	}
-
-
+	}
+
+
 	public void recPaso2() throws Exception {
 		// Levanto el mensaje del socket mesa
 		String msg_enc = (String) mesaIn.readObject();
-
+
 		// Lo desencripto con la clave publica de la urna
 		Desencriptador decrypt = new Desencriptador(privadaUrna);
 		String tokenFirmado = decrypt.desencriptarString(msg_enc);
-
+
 		// Verifico que el svu este firmado por la Mesa
 		Validador valid = new Validador(InfoServidores.publicaMesa);
 		List<String> token = valid.validar(tokenFirmado);
-
+
 		if (token.size() != 2) throw new Exception("El token esta mal formado");
-
+
 		// Guardo el id de la votacion.
 		this.idv = token.get(1);
-
+
 		// Desencripto el svu con mi clave privada
 		this.svu = decrypt.desencriptarString(token.get(0));
-
+
 		// Me fijo si existe el comprobante, si no lo inserto
 		try {
 			// Si no existe lanza excepcion ComprobanteNotFoundException
@@ -98,7 +98,7 @@
 			// caso contrario me fijo si no votó.
 			if (!ComprobantesUrna.getInstance().getEstado(svu).equals("no voto"))
 				throw new Exception("El usuario ya voto o esta en proceso");
-
+
 		}
 		catch (ComprobanteNotFoundException e) {
 			// Guardo el token firmado como comprobante
@@ -104,7 +104,7 @@
 			// Guardo el token firmado como comprobante
 			ComprobantesUrna.getInstance().insertarComprobante(svu, idv, tokenFirmado);
 		}
-
+
 	}
 	public void recPaso4() throws Exception  {
 		// Le pido a UrnaManager por el mensaje 4 (bloqueante).
@@ -109,7 +109,7 @@
 	public void recPaso4() throws Exception  {
 		// Le pido a UrnaManager por el mensaje 4 (bloqueante).
 		List aList = UrnaManager.getInstance().getVotante(svu);
-
+
 		// Guardo el socket del votante
 		votante = (Socket) aList.get(0);
 		//votanteIn = new ObjectInputStream(votante.getInputStream());
@@ -118,7 +118,7 @@
 		// Guardo el sobre
 		sobre = (String) aList.get(1);
 	}
-
+
 	public void envPaso5() throws Exception {
 		// Creo un string aleatorio challenge
 		SecureRandom random = new SecureRandom();
@@ -129,10 +129,10 @@
 		// Encripto svu con mi clave publica
 		Encriptador encrypt = new Encriptador();
 		String usvu = encrypt.encriptar(this.svu, InfoServidores.publicaUrna);
-
+
 		// Encripto con la clave publica de la mesa el svu encriptado y el challenge
 		String msg = encrypt.encriptar(Arrays.asList(usvu, challenge), InfoServidores.publicaMesa);
-
+
 		// Envio el mensaje a la mesa.
 		mesaOut.writeObject(msg);
 	}
@@ -139,19 +139,19 @@
 	public void recPaso6() throws Exception{
 		// Agarro el msg de la mesa
 		String msg_enc = (String) mesaIn.readObject();
-
+
 		// Lo desencripto con mi clave privada
 		Desencriptador decrypt = new Desencriptador(privadaUrna);
 		String msg = decrypt.desencriptarString(msg_enc);
-
+
 		// Verifico que obtenga el challenge firmado por la mesa
 		Validador valid = new Validador(InfoServidores.publicaMesa);
 		if (!challenge.equals(valid.validarString(msg))) throw new Exception("Fallo el check del challenge");
-
+
 		// Guardo al sobre en la base y marco que ya votó.
 		Boletas.getInstance().insertarBoleta(idv, svu, sobre);
 		ComprobantesUrna.getInstance().setEstado(svu, new String("ya voto"));
-
+
 	}
 	public void envPaso7() throws InvalidKeyException, IOException {
 		// Hago un hash del sobre
@@ -156,11 +156,11 @@
 	public void envPaso7() throws InvalidKeyException, IOException {
 		// Hago un hash del sobre
 		String msg_hash = Hasheador.hashear(sobre);
-
+
 		// Lo firmo
 		Firmador firm = new Firmador(privadaUrna);
 		String msg7 = firm.firmar(msg_hash);
-
+
 		// Lo envio al votante
 		votanteOut.writeObject(msg7);
 	}
